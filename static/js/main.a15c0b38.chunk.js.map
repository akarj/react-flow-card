{"version":3,"sources":["Components/Data/InitialState.js","Components/Modules/TextField/TextField.jsx","Components/Modules/ImageField/ImageField.jsx","Components/Modules/CardGenerator/CardGenerator.jsx","Components/ReactFlowWorkField/ReactFlowWorkField.jsx","Components/Modules/Outfield/Outfield.jsx","Components/Modules/Module/Module.jsx","Components/BottomBar/BottomBar.jsx","App.js","index.js"],"names":["initialState","id","type","data","label","position","x","y","memo","useState","text","setText","className","console","log","name","max","onChange","event","target","value","newData","imageFile","setImageFile","src","alt","htmlFor","accept","placeholder","URL","createObjectURL","files","color","setColor","bgColor","setBgColor","setId","nodes","useStoreState","store","transform","useStoreActions","actions","setSelectedElements","modelIdArray","setModelIdArray","changeHandler","e","Number","newBGArray","onClick","params","l","prev","style","background","onConnect","nodeTypes","TextNode","ImageNode","CardNode","OutNode","text_id","image_id","card_id","getId","ReactFlowWorkField","elements","setElements","reactFlowInstance","setReactFlowInstance","reactFlowWrapper","useRef","useEffect","ref","els","addEdge","snapToGrid","snapGrid","defaultZoom","onDragOver","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","getData","project","clientX","left","clientY","top","newNode","es","concat","onLoad","_reactFlowInstance","width","border","onElementsRemove","elementsToRemove","removeElements","Module","props","BottomBar","onDragStart","nodeType","setData","effectAllowed","draggable","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a15c0b38.chunk.js","sourcesContent":["export const initialState = [\r\n  {\r\n    id: \"text-01\",\r\n    type: \"TextNode\",\r\n    data: {\r\n      label: \"Text Input\",\r\n    },\r\n    position: {\r\n      x: 100,\r\n      y: 50,\r\n    },\r\n  },\r\n  {\r\n    id: \"image-01\",\r\n    type: \"ImageNode\",\r\n    data: {\r\n      label: \"image Input\",\r\n    },\r\n    position: {\r\n      x: 100,\r\n      y: 200,\r\n    },\r\n  },\r\n  {\r\n    id: \"card-01\",\r\n    type: \"CardNode\",\r\n    data: {\r\n      label: \"card Input\",\r\n    },\r\n    position: {\r\n      x: 500,\r\n      y: 150,\r\n    },\r\n  },\r\n\r\n  // {\r\n  //   id: \"text-01-card-01\",\r\n  //   type: \"straight\",\r\n  //   source: \"text-01\",\r\n  //   target: \"card-01\",\r\n  //   animated: true,\r\n  // },\r\n  // {\r\n  //   id: \"image-01-card-01\",\r\n  //   type: \"straight\",\r\n  //   source: \"image-01\",\r\n  //   target: \"card-01\",\r\n  //   animated: true,\r\n  // },\r\n];\r\n","import { useState, memo } from \"react\";\r\nimport \"./TextField.scss\";\r\nimport { Handle } from \"react-flow-renderer\";\r\n\r\nexport default memo(({ data }) => {\r\n  const [text, setText] = useState(\"\");\r\n  const changeHandler = event => {\r\n    setText(event.target.value);\r\n\r\n    let newData = { ...data, text };\r\n    data = newData;\r\n  };\r\n  return (\r\n    <div className=\"textField-container\">\r\n      {console.log(data)}\r\n      <div className=\"desc\">\r\n        <header>\r\n          <h2>Text Field</h2>\r\n        </header>\r\n      </div>\r\n      <div className=\"text-show-field\">{text && <span>{text}</span>}</div>\r\n      <div className=\"text-input-field\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"text\"\r\n          id=\"text\"\r\n          max=\"1000\"\r\n          onChange={changeHandler}\r\n        />\r\n      </div>\r\n      <Handle className=\"nodeOut\" type=\"source\" position=\"right\" />\r\n    </div>\r\n  );\r\n});\r\n","import { useState, memo } from \"react\";\r\nimport { Handle } from \"react-flow-renderer\";\r\nimport \"./ImageField.scss\";\r\n\r\nexport default memo(({ data }) => {\r\n  const [imageFile, setImageFile] = useState(null);\r\n\r\n  // [Functions]\r\n  const changeHandler = event =>\r\n    setImageFile(URL.createObjectURL(event.target.files[0]));\r\n  return (\r\n    <div className=\"imageField-container\">\r\n      <div className=\"title\">\r\n        <header>\r\n          <h2>Image Field</h2>\r\n        </header>\r\n      </div>\r\n      <div className=\"image-container\">\r\n        {imageFile && <img src={imageFile} alt=\"card\"></img>}\r\n      </div>\r\n      <div className=\"image-add\">\r\n        <label htmlFor=\"imageFile\">\r\n          <input\r\n            type=\"file\"\r\n            name=\"imageFile\"\r\n            id=\"imageFile\"\r\n            accept=\"image/*\"\r\n            placeholder=\"Add Image\"\r\n            onChange={changeHandler}\r\n          />\r\n          <span>Add Image</span>\r\n        </label>\r\n      </div>\r\n      <Handle className=\"nodeOut\" type=\"source\" position=\"right\" />\r\n    </div>\r\n  );\r\n});\r\n","import React, { memo, useState } from \"react\";\r\nimport { Handle, useStoreState, useStoreActions } from \"react-flow-renderer\";\r\nimport \"./CardGenerator.scss\";\r\n\r\nexport default memo(({ data }) => {\r\n  const [color, setColor] = useState([0, 0, 0]);\r\n  const [bgColor, setBgColor] = useState([0, 0, 0]);\r\n  const [id, setId] = useState(3);\r\n  const nodes = useStoreState(store => store.nodes);\r\n\r\n  const transform = useStoreState(store => store.transform);\r\n  const setSelectedElements = useStoreActions(\r\n    actions => actions.setSelectedElements\r\n  );\r\n\r\n  const [modelIdArray, setModelIdArray] = useState([\"M-1\", \"M-2\"]);\r\n\r\n  const changeHandler = e => {\r\n    const name = e.target.name;\r\n\r\n    const value = Number(e.target.value);\r\n    if (value >= 0 && value < 256) {\r\n      let col;\r\n\r\n      if (name[0] === \"b\") {\r\n        col = name[3];\r\n        switch (col) {\r\n          case \"R\": {\r\n            const newBGArray = [value, bgColor[1], bgColor[2]];\r\n            setBgColor(newBGArray);\r\n            break;\r\n          }\r\n\r\n          case \"G\": {\r\n            const newBGArray = [bgColor[0], value, bgColor[2]];\r\n            setBgColor(newBGArray);\r\n            break;\r\n          }\r\n\r\n          case \"B\": {\r\n            const newBGArray = [bgColor[0], bgColor[1], value];\r\n            setBgColor(newBGArray);\r\n            break;\r\n          }\r\n\r\n          default:\r\n            console.log(\"Wrong color input\");\r\n            break;\r\n        }\r\n        console.log(\"bg\", bgColor);\r\n      } else {\r\n        col = name[5];\r\n        switch (col) {\r\n          case \"R\": {\r\n            const newBGArray = [value, color[1], color[2]];\r\n            setColor(newBGArray);\r\n            break;\r\n          }\r\n\r\n          case \"G\": {\r\n            const newBGArray = [color[0], value, color[2]];\r\n            setColor(newBGArray);\r\n            break;\r\n          }\r\n\r\n          case \"B\": {\r\n            const newBGArray = [color[0], color[1], value];\r\n            setColor(newBGArray);\r\n            break;\r\n          }\r\n\r\n          default:\r\n            console.log(\"Wrong color input\");\r\n            break;\r\n        }\r\n        console.log(\"text\", color);\r\n      }\r\n    }\r\n  };\r\n\r\n  const clickHandler = e => {\r\n    console.log(e.params);\r\n    console.log(modelIdArray);\r\n    let l = setModelIdArray(prev => [...prev, `M-${id}`]);\r\n    setId(prev => prev + 1);\r\n    console.log(\"length\", l);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"card-container\">\r\n        <div className=\"header-div\">\r\n          <header>Card Generator</header>\r\n          {console.log(\"nodes\", nodes)}\r\n          {/* {console.log(\"transform\", transform)}\r\n          {console.log(\"setSelectedElements\", setSelectedElements)} */}\r\n        </div>\r\n        <div className=\"color-input-div\">\r\n          <div className=\"background-color\">\r\n            <div className=\"header\">Background color</div>\r\n            <div className=\"value-input\">\r\n              <label htmlFor=\"bg-R\" className=\"property-name\">\r\n                R\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"R\"\r\n                name=\"bg-R\"\r\n                id=\"bg-R\"\r\n                onChange={changeHandler}\r\n                max=\"3\"\r\n              />\r\n\r\n              <label htmlFor=\"bg-G\" className=\"property-name\">\r\n                G\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"G\"\r\n                name=\"bg-G\"\r\n                id=\"bg-G\"\r\n                onChange={changeHandler}\r\n                max=\"3\"\r\n              />\r\n\r\n              <label htmlFor=\"bg-B\" className=\"property-name\">\r\n                B\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"B\"\r\n                name=\"bg-B\"\r\n                id=\"bg-B\"\r\n                onChange={changeHandler}\r\n                max=\"3\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"text-color\">\r\n            <div className=\"header\">Text color</div>\r\n            <div className=\"value-input\">\r\n              <label htmlFor=\"text-R\" className=\"property-name\">\r\n                R\r\n              </label>\r\n              <input\r\n                className=\"R\"\r\n                type=\"text\"\r\n                name=\"text-R\"\r\n                id=\"text-R\"\r\n                max=\"3\"\r\n                onChange={changeHandler}\r\n              />\r\n\r\n              <label htmlFor=\"text-G\" className=\"property-name\">\r\n                G\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"text-G\"\r\n                className=\"G\"\r\n                id=\"text-G\"\r\n                max=\"3\"\r\n                onChange={changeHandler}\r\n              />\r\n\r\n              <label htmlFor=\"text-B\" className=\"property-name\">\r\n                B\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"text-B\"\r\n                className=\"B\"\r\n                id=\"text-B\"\r\n                max=\"3\"\r\n                onChange={changeHandler}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"add-input-button-div\">\r\n          <button onClick={clickHandler}>Add Input</button>\r\n        </div>\r\n        <div className=\"react-flow-handle-div\">\r\n          {/* {modelIdArray.map(id => {\r\n          return (\r\n            <div id={id} key={id}>\r\n              {id}\r\n            </div>\r\n          );\r\n        })} */}\r\n\r\n          {/* <Handle\r\n          id=\"H-1\"\r\n          type=\"target\"\r\n          position=\"left\"\r\n          style={{ backgroundColor: \"#555\" }}\r\n          onConnect={params => console.log(\"handle onConnect\", params)}\r\n          // isConnectable={isConnectable}\r\n        /> */}\r\n        </div>\r\n        {/* {modelIdArray.map(id => {\r\n          return (\r\n            <Handle\r\n              key={`${id}`}\r\n              id={`${id}`}\r\n              type=\"target\"\r\n              targetHandle={`${id}`}\r\n              position=\"left\"\r\n            >\r\n              {console.log(\"Handle \", { id })}\r\n            </Handle>\r\n          );\r\n        })} */}\r\n      </div>\r\n      <Handle\r\n        type=\"target\"\r\n        position=\"left\"\r\n        id=\"a\"\r\n        style={{ background: \"#555\" }}\r\n        onConnect={params => console.log(\"handle onConnect\", params)}\r\n        // isConnectable={isConnectable}\r\n      />\r\n      <Handle\r\n        id=\"b\"\r\n        type=\"target\"\r\n        position=\"left\"\r\n        style={{ background: \"#555\" }}\r\n        onConnect={params => console.log(\"handle onConnect\", params)}\r\n        // isConnectable={isConnectable}\r\n      />\r\n      <Handle\r\n        id=\"c\"\r\n        type=\"target\"\r\n        position=\"left\"\r\n        style={{ background: \"#555\" }}\r\n        onConnect={params => console.log(\"handle onConnect\", params)}\r\n        // isConnectable={isConnectable}\r\n      />\r\n    </>\r\n  );\r\n});\r\n","import \"./ReactFlowWorkField.scss\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport { initialState } from \"../../Components/Data/InitialState\";\r\nimport ReactFlow, {\r\n  removeElements,\r\n  addEdge,\r\n  // ReactFlowProvider,\r\n  Controls,\r\n  Background,\r\n  ReactFlowProvider,\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\nimport TextNode from \"../Modules/TextField/TextField\";\r\nimport ImageNode from \"../Modules/ImageField/ImageField\";\r\nimport CardNode from \"../Modules/CardGenerator/CardGenerator\";\r\nimport OutNode from \"../Modules/Outfield/Outfield\";\r\n\r\nconst nodeTypes = {\r\n  TextNode,\r\n  ImageNode,\r\n  CardNode,\r\n  OutNode,\r\n};\r\n\r\n/*\r\n\r\n\r\n\r\n*/\r\n\r\nlet text_id = 2;\r\nlet image_id = 2;\r\nlet card_id = 2;\r\nconst getId = type =>\r\n  type === \"TEXT\"\r\n    ? `text-${text_id++}`\r\n    : type === \"IMAGE\"\r\n    ? `image-${image_id++}`\r\n    : `card-${card_id++}`;\r\n\r\nexport default function ReactFlowWorkField() {\r\n  // [States]\r\n  const [elements, setElements] = useState(initialState);\r\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n  const reactFlowWrapper = useRef(null);\r\n\r\n  // [Functions]\r\n  const onDragOver = event => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    const onChange = event => {\r\n      setElements(els =>\r\n        els.map(e => {\r\n          return {\r\n            ...e,\r\n            data: {\r\n              ...e.data,\r\n            },\r\n          };\r\n        })\r\n      );\r\n    };\r\n  }, []);\r\n  const onConnect = params =>\r\n    setElements(els => {\r\n      console.log(\"params\", params);\r\n      console.log(\"els\", els);\r\n      return addEdge(params, els);\r\n    });\r\n\r\n  const onElementsRemove = elementsToRemove =>\r\n    setElements(els => removeElements(elementsToRemove, els));\r\n\r\n  const onDrop = event => {\r\n    event.preventDefault();\r\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n    const type = event.dataTransfer.getData(\"application/reactflow\");\r\n    const position = reactFlowInstance.project({\r\n      x: event.clientX - reactFlowBounds.left,\r\n      y: event.clientY - reactFlowBounds.top,\r\n    });\r\n    const newNode = {\r\n      id: getId(),\r\n      type,\r\n      position,\r\n      data: { label: `${type} node` },\r\n    };\r\n\r\n    setElements(es => es.concat(newNode));\r\n  };\r\n\r\n  const onLoad = _reactFlowInstance => setReactFlowInstance(_reactFlowInstance);\r\n\r\n  const generateCard = e => {\r\n    console.log(e);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"generate-button-div\">\r\n        <label htmlFor=\"generate-button\">\r\n          <button name=\"generate-button\" onClick={generateCard}>\r\n            Generate\r\n          </button>\r\n        </label>\r\n      </div>\r\n      <div className=\"reactFlowWorkField-container\" ref={reactFlowWrapper}>\r\n        <ReactFlowProvider>\r\n          <ReactFlow\r\n            onConnect={onConnect}\r\n            elements={elements}\r\n            nodeTypes={nodeTypes}\r\n            snapToGrid={true}\r\n            snapGrid={[20, 20]}\r\n            defaultZoom={1.5}\r\n            onDragOver={onDragOver}\r\n            onDrop={onDrop}\r\n            onLoad={onLoad}\r\n            style={{\r\n              width: \"99.8vw\",\r\n              // backgroundColor: \"lightcoral\",\r\n              //  borderColor:\"black\",\r\n              // borderWidth:\"1px\",\r\n              border: \"1px solid black\",\r\n            }}\r\n            onElementsRemove={onElementsRemove}\r\n          >\r\n            <Controls />\r\n            <Background />\r\n          </ReactFlow>\r\n        </ReactFlowProvider>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import \"./Outfield.scss\";\r\n\r\nexport default function Outfield() {\r\n  return <div>somethis</div>;\r\n}\r\n","import \"./Module.scss\";\r\n\r\nexport default function Module(props) {\r\n  return (\r\n    <div className=\"module-container\">\r\n      <span>{props.type}</span>\r\n    </div>\r\n  );\r\n}\r\n","import \"./BottomBar.scss\";\r\nimport Module from \"../Modules/Module/Module\";\r\n\r\nexport default function BottomBar() {\r\n  const onDragStart = (event, nodeType) => {\r\n    event.dataTransfer.setData(\"application/reactflow\", nodeType);\r\n    event.dataTransfer.effectAllowed = \"move\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"bottomBar-container\">\r\n      <div\r\n        className=\"image-module\"\r\n        onDragStart={e => onDragStart(e, \"ImageNode\")}\r\n        draggable\r\n      >\r\n        <Module key=\"Image Module\" type=\"Image Module\" />\r\n      </div>\r\n      <div\r\n        className=\"text-module\"\r\n        onDragStart={e => onDragStart(e, \"TextNode\")}\r\n        draggable\r\n      >\r\n        <Module key=\"Text Module\" type=\"Text Module\" />\r\n      </div>\r\n      <div\r\n        className=\"card-module\"\r\n        onDragStart={e => onDragStart(e, \"CardNode\")}\r\n        draggable\r\n      >\r\n        <Module key=\"Card Generator\" type=\"Card Generator\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.scss\";\nimport ReactFlowWorkField from \"./Components/ReactFlowWorkField/ReactFlowWorkField\";\nimport BottomBar from \"./Components/BottomBar/BottomBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"main-container\">\n        <ReactFlowWorkField />\n      </div>\n      <div className=\"bottom-bar\">\n        <BottomBar />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}